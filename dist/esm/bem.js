/*! @ryanmorr/bem v0.2.1 | https://github.com/ryanmorr/bem */
const t=new Map;function e(e,s){const n=t.get(e);if(void 0!==n){const t=e.className.split(" ");n.forEach((n=>{const c=n.modifiers;if(c.every((e=>t.includes(e)))){c.some((t=>s.includes(t)))&&n.callback.call(e,e)}}))}}const s="--",n=/^[a-zA-Z0-9]+(?:[-_][a-zA-Z0-9]+)*$/;function c(t,e,...s){return s.every((s=>t.classList.contains(i(e,s))))}function i(t,e){return t+s+e}class l{constructor(t,e){!function(t,e){const s=e.length;for(let n=0;n<s;n++)t[n]=e[n];t.length=s}(this,t),this.name=e}each(t){for(let e=0,s=this.length;e<s;e++){const s=this[e];t.call(s,s,e,this)}return this}modify(...t){return t=t.map((t=>i(this.name,t))),this.each((s=>{const n=s.className.split(" "),c=t.filter((t=>!n.includes(t)));c.length&&(s.classList.add(...c),e(s,c))}))}unmodify(...t){return t=t.map((t=>i(this.name,t))),this.each((e=>e.classList.remove(...t)))}toggle(...t){return t=t.map((t=>i(this.name,t))),this.each((s=>{const n=t.reduce(((t,e)=>(s.classList.toggle(e)&&t.push(e),t)),[]);n.length&&e(s,n)}))}is(...t){return c(this[0],this.name,...t)}on(...e){const s=e.pop(),n=e.map((t=>i(this.name,t)));return this.each((e=>function(e,s,n){let c=t.get(e);void 0===c&&(c=[],t.set(e,c)),c.push({modifiers:s,callback:n})}(e,n,s)))}}class a extends l{constructor(t,...e){const s=t[0].className.split(" ").reduce(((t,e)=>t||(n.test(e)?e:t)),null);e.length&&(t=Array.from(t).filter((t=>c(t,s,...e)))),super(t,s)}element(t,...e){const s=this.name+"__"+t;let n=[];return this.each((t=>n.push.apply(n,t.getElementsByClassName(s)))),e.length&&(n=n.filter((t=>c(t,s,...e)))),new l(n,s)}}function r(t,...e){let s=t;return"string"==typeof t&&(s=document.querySelectorAll(t)),t.nodeType&&(s=[t]),new a(s,...e)}export{r as default};
