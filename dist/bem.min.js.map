{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/bem.js","src/block.js","src/element.js","src/util.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","bem","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","selector","elements","document","querySelectorAll","nodeType","_len","arguments","modifiers","Array","_key","Function","prototype","bind","apply","_block2","default","concat","_block","_element","_util","BEMBlock","_BEMElement","_classCallCheck","name","getBlockName","toArray","filter","el","hasModifiers","undefined","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","elementName","_len2","_key2","getElementName","each","push","getElementsByClassName","_element2","BEMElement","fn","len","_this","classes","map","modifier","getModifierName","_el$classList","classList","add","_toConsumableArray","_this2","_el$classList2","remove","_this3","_len3","_key3","forEach","toggle","_len4","_key4","obj","from","slice","every","contains","className","split","reduce","cls","blockNameRe","test","block","element","elementSeparator","modifierSeparator"],"mappings":"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","file":"bem.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * Import dependencies\r\n */\r\nimport BEMBlock from './block';\r\n\r\n/**\r\n * Provide a CSS selector string, DOM\r\n * element, or nodelist/array and get\r\n * a `BEMBlock` instance to traverse and\r\n * manipulate the component\r\n *\r\n * @param {String|Element|ArrayLike} blocks\r\n * @param {...String} modifiers\r\n * @return {BEM}\r\n * @api public\r\n */\r\nexport default function bem(selector, ...modifiers) {\r\n    let elements = selector;\r\n    if (typeof selector === 'string') {\r\n        elements = document.querySelectorAll(selector);\r\n    }\r\n    if (selector.nodeType) {\r\n        elements = [selector];\r\n    }\r\n    return new BEMBlock(elements, ...modifiers);\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport BEMElement from './element';\r\nimport { toArray, hasModifiers, getBlockName, getElementName } from './util';\r\n\r\n/**\r\n * BEM block class\r\n *\r\n * @class BEMBlock\r\n * @extends BEMElement\r\n * @api public\r\n */\r\nexport default class BEMBlock extends BEMElement {\r\n\r\n    /**\r\n     * Instantiate the class with a collection\r\n     * of block level elements and optionally\r\n     * the BEM block class name\r\n     *\r\n     * @constructor\r\n     * @param {ArrayLike} elements\r\n     * @param {...String} modifiers\r\n     * @api private\r\n     */\r\n    constructor(elements, ...modifiers) {\r\n        const name = getBlockName(elements[0]);\r\n        if (modifiers.length) {\r\n            elements = toArray(elements).filter((el) => hasModifiers(el, name, ...modifiers));\r\n        }\r\n        super(elements, name);\r\n    }\r\n\r\n    /**\r\n     * Find BEM block-elements that are decendants\r\n     * of the collection of block elements\r\n     *\r\n     * @param {String} elementName\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    element(elementName, ...modifiers) {\r\n        const name = getElementName(this.name, elementName);\r\n        let elements = [];\r\n        this.each((el) => elements.push.apply(elements, el.getElementsByClassName(name)));\r\n        if (modifiers.length) {\r\n            elements = elements.filter((el) => hasModifiers(el, name, ...modifiers));\r\n        }\r\n        return new BEMElement(elements, name);\r\n    }\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport { push, hasModifiers, getModifierName } from './util';\r\n\r\n/**\r\n * BEM element class\r\n *\r\n * @class BEMElement\r\n * @api public\r\n */\r\nexport default class BEMElement {\r\n\r\n    /**\r\n     * Instantiate the class with a collection\r\n     * of BEM elements and the BEM class name\r\n     *\r\n     * @constructor\r\n     * @param {ArrayLike} elements\r\n     * @param {String} name\r\n     * @api private\r\n     */\r\n    constructor(elements, name) {\r\n        push(this, elements);\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Invoke the passed function for each element\r\n     * in the collection\r\n     *\r\n     * @param {Function} fn\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    each(fn) {\r\n        for (let i = 0, len = this.length; i < len; i++) {\r\n            const el = this[i];\r\n            fn.call(el, el, i, this);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add one or more modifiers to the\r\n     * collection of BEM elements\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    modify(...modifiers) {\r\n        const classes = modifiers.map((modifier) => getModifierName(this.name, modifier));\r\n        return this.each((el) => el.classList.add(...classes));\r\n    }\r\n\r\n    /**\r\n     * Remove one or more modifiers from the\r\n     * collection of BEM elements\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    unmodify(...modifiers) {\r\n        const classes = modifiers.map((modifier) => getModifierName(this.name, modifier));\r\n        return this.each((el) => el.classList.remove(...classes));\r\n    }\r\n\r\n    /**\r\n     * Toggle adding/removing one or more modifiers\r\n     * to the collection of BEM elements\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    toggle(...modifiers) {\r\n        return this.each((el) => {\r\n            modifiers.forEach((modifier) => {\r\n                el.classList.toggle(getModifierName(this.name, modifier));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if the first BEM element in the\r\n     * collection has one or more modifiers\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {Boolean}\r\n     * @api public\r\n     */\r\n    is(...modifiers) {\r\n        return hasModifiers(this[0], this.name, ...modifiers);\r\n    }\r\n}\r\n","/**\r\n * Common variables\r\n */\r\nconst slice = [].slice;\r\nconst elementSeparator = '__';\r\nconst modifierSeparator = '--';\r\nconst blockNameRe = /^[a-zA-Z0-9]+(?:[-_][a-zA-Z0-9]+)*$/;\r\n\r\n/**\r\n * Convert an array-like object to\r\n * an array\r\n *\r\n * @param {ArrayLike} obj\r\n * @return {Array}\r\n * @api private\r\n */\r\nexport function toArray(obj) {\r\n    if (Array.from) {\r\n        return Array.from(obj);\r\n    }\r\n    return slice.call(obj);\r\n}\r\n\r\n/**\r\n * Check if an element has one or\r\n * more modifiers\r\n *\r\n * @param {Element} el\r\n * @param {String} name\r\n * @param {...String} modifiers\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function hasModifiers(el, name, ...modifiers) {\r\n    return modifiers.every((modifier) => {\r\n        return el.classList.contains(getModifierName(name, modifier));\r\n    });\r\n}\r\n\r\n/**\r\n * Add elements to a `BEMBlock` or\r\n * `BEMElement` isntance as indexed\r\n * properties to emulate an array\r\n *\r\n * @param {BEMBlock|BEMElement} bem\r\n * @param {ArrayLike} elements\r\n * @api private\r\n */\r\nexport function push(bem, elements) {\r\n    const len = elements.length;\r\n    for (let i = 0; i < len; i++) {\r\n        bem[i] = elements[i];\r\n    }\r\n    bem.length = len;\r\n}\r\n\r\n/**\r\n * Get the BEM block name from an\r\n * element\r\n *\r\n * @param {Element} el\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function getBlockName(el) {\r\n    return el.className.split(' ').reduce((name, cls) => {\r\n        if (name) {\r\n            return name;\r\n        }\r\n        return blockNameRe.test(cls) ? cls : name;\r\n    }, null);\r\n}\r\n\r\n/**\r\n * Get the BEM block-element name\r\n *\r\n * @param {String} block\r\n * @param {String} element\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function getElementName(block, element) {\r\n    return block + elementSeparator + element;\r\n}\r\n\r\n/**\r\n * Get the BEM modifier name\r\n *\r\n * @param {String} element\r\n * @param {String} modifier\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function getModifierName(element, modifier) {\r\n    return element + modifierSeparator + modifier;\r\n}\r\n"]}