{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/bem.js","src/block.js","src/element.js","src/listener.js","src/util.js"],"names":["f","exports","module","define","amd","window","global","self","this","bem","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","selector","elements","document","querySelectorAll","nodeType","_len","arguments","modifiers","Array","_key","_construct","_block","default","concat","_element","_util","BEMBlock","_classCallCheck","name","getBlockName","from","filter","el","hasModifiers","apply","_possibleConstructorReturn","_getPrototypeOf","elementName","_len2","_key2","getElementName","each","push","getElementsByClassName","_listener","BEMElement","fn","len","_this","map","modifier","getModifierName","_el$classList","elClasses","className","split","classes","includes","classList","add","_toConsumableArray","dispatchListeners","_this2","_el$classList2","remove","_this3","_len3","_key3","reduce","acc","toggle","_len4","_key4","_this4","_len5","_key5","callback","pop","addListener","listeners","listenersMap","get","undefined","set","newModifiers","forEach","listener","listenerModifiers","hasAll","every","mod","hasAny","some","Map","contains","cls","blockNameRe","test","block","element","elementSeparator","modifierSeparator"],"mappings":";CAAA,SAAAA,GAAA,GAAA,iBAAAC,SAAA,oBAAAC,OAAAA,OAAAD,QAAAD,SAAA,GAAA,mBAAAG,QAAAA,OAAAC,IAAAD,OAAA,GAAAH,OAAA,EAAA,oBAAAK,OAAAA,OAAA,oBAAAC,OAAAA,OAAA,oBAAAC,KAAAA,KAAAC,MAAAC,IAAAT,KAAA,CAAA,WAAA,OAAA,SAAAU,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAf,GAAA,IAAAY,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAC,EAAA,mBAAAC,SAAAA,QAAA,IAAAjB,GAAAgB,EAAA,OAAAA,EAAAD,GAAA,GAAA,GAAAG,EAAA,OAAAA,EAAAH,GAAA,GAAA,IAAAI,EAAA,IAAAC,MAAA,uBAAAL,EAAA,KAAA,MAAAI,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAV,EAAAG,GAAA,CAAAd,QAAA,IAAAU,EAAAI,GAAA,GAAAQ,KAAAD,EAAArB,QAAA,SAAAS,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAY,EAAAA,EAAArB,QAAAS,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAd,QAAA,IAAA,IAAAiB,EAAA,mBAAAD,SAAAA,QAAAF,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAW,EAAA,CAAA,SAAAR,EAAAf,EAAAD,2ECgBe,SAAayB,GACxB,IAAIC,EAAWD,EACS,iBAAbA,IACPC,EAAWC,SAASC,iBAAiBH,IAErCA,EAASI,WACTH,EAAW,CAACD,IANgC,IAAA,IAAAK,EAAAC,UAAAR,OAAXS,EAAW,IAAAC,MAAA,EAAAH,EAAAA,EAAA,EAAA,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAXF,EAAWE,EAAA,GAAAH,UAAAG,GAQhD,OAAAC,EAAWC,EAAAC,QAAX,CAAoBX,GAApBY,OAAiCN,KArBrC,MAAAI,KAAApB,EAAA,wrBCAA,MAAAuB,KAAAvB,EAAA,0CACAwB,EAAAxB,EAAA,qzBASqByB,cAajB,SAAAA,EAAYf,GAAwB,IAAA,IAAAI,EAAAC,UAAAR,OAAXS,EAAW,IAAAC,MAAA,EAAAH,EAAAA,EAAA,EAAA,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAXF,EAAWE,EAAA,GAAAH,UAAAG,gGAAAQ,CAAAnC,KAAAkC,GAChC,IAAME,GAAO,EAAAH,EAAAI,cAAalB,EAAS,IADH,OAE5BM,EAAUT,SACVG,EAAWO,MAAMY,KAAKnB,GAAUoB,OAAO,SAACC,GAAD,OAAQP,EAAAQ,aAAAC,WAAA,EAAA,CAAaF,EAAIJ,GAAjBL,OAA0BN,OAH7CkB,EAAA3C,KAAA4C,EAAAV,GAAAnB,KAAAf,KAK1BmB,EAAUiB,0PAlBcJ,EAAAF,+CA8B1Be,GAA2B,IAAA,IAAAC,EAAAtB,UAAAR,OAAXS,EAAW,IAAAC,MAAA,EAAAoB,EAAAA,EAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAXtB,EAAWsB,EAAA,GAAAvB,UAAAuB,GAC/B,IAAMX,GAAO,EAAAH,EAAAe,gBAAehD,KAAKoC,KAAMS,GACnC1B,EAAW,GAKf,OAJAnB,KAAKiD,KAAK,SAACT,GAAD,OAAQrB,EAAS+B,KAAKR,MAAMvB,EAAUqB,EAAGW,uBAAuBf,MACtEX,EAAUT,SACVG,EAAWA,EAASoB,OAAO,SAACC,GAAD,OAAQP,EAAAQ,aAAAC,WAAA,EAAA,CAAaF,EAAIJ,GAAjBL,OAA0BN,OAE1D,IAAIO,EAAAF,QAAWX,EAAUiB,uMC/CxC,IAAAgB,EAAA3C,EAAA,cACAwB,EAAAxB,EAAA,ygBAQqB4C,aAWjB,SAAAA,EAAYlC,EAAUiB,gGAAMD,CAAAnC,KAAAqD,IACxB,EAAApB,EAAAiB,MAAKlD,KAAMmB,GACXnB,KAAKoC,KAAOA,sDAWXkB,GACD,IAAK,IAAI/C,EAAI,EAAGgD,EAAMvD,KAAKgB,OAAQT,EAAIgD,EAAKhD,IAAK,CAC7C,IAAMiC,EAAKxC,KAAKO,GAChB+C,EAAGvC,KAAKyB,EAAIA,EAAIjC,EAAGP,MAEvB,OAAOA,sCAWU,IAAA,IAAAwD,EAAAxD,KAAAuB,EAAAC,UAAAR,OAAXS,EAAW,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAXF,EAAWE,GAAAH,UAAAG,GAEjB,OADAF,EAAYA,EAAUgC,IAAI,SAACC,GAAD,OAAc,EAAAzB,EAAA0B,iBAAgBH,EAAKpB,KAAMsB,KAC5D1D,KAAKiD,KAAK,SAACT,GACd,IAEoBoB,EAFdC,EAAYrB,EAAGsB,UAAUC,MAAM,KAC/BC,EAAUvC,EAAUc,OAAO,SAACmB,GAAD,OAAeG,EAAUI,SAASP,KAC/DM,EAAQhD,UACR4C,EAAApB,EAAG0B,WAAUC,IAAbzB,MAAAkB,EAAAQ,EAAoBJ,KACpB,EAAAZ,EAAAiB,mBAAkB7B,EAAIwB,yCAaX,IAAA,IAAAM,EAAAtE,KAAA8C,EAAAtB,UAAAR,OAAXS,EAAW,IAAAC,MAAAoB,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAXtB,EAAWsB,GAAAvB,UAAAuB,GAEnB,OADAtB,EAAYA,EAAUgC,IAAI,SAACC,GAAD,OAAc,EAAAzB,EAAA0B,iBAAgBW,EAAKlC,KAAMsB,KAC5D1D,KAAKiD,KAAK,SAACT,GAAD,IAAA+B,EAAA,OAAQA,EAAA/B,EAAG0B,WAAUM,OAAb9B,MAAA6B,EAAAH,EAAuB3C,uCAW/B,IAAA,IAAAgD,EAAAzE,KAAA0E,EAAAlD,UAAAR,OAAXS,EAAW,IAAAC,MAAAgD,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAXlD,EAAWkD,GAAAnD,UAAAmD,GAEjB,OADAlD,EAAYA,EAAUgC,IAAI,SAACC,GAAD,OAAc,EAAAzB,EAAA0B,iBAAgBc,EAAKrC,KAAMsB,KAC5D1D,KAAKiD,KAAK,SAACT,GACd,IAAMwB,EAAUvC,EAAUmD,OAAO,SAACC,EAAKnB,GAInC,OAHIlB,EAAG0B,UAAUY,OAAOpB,IACpBmB,EAAI3B,KAAKQ,GAENmB,GACR,IACCb,EAAQhD,SACR,EAAAoC,EAAAiB,mBAAkB7B,EAAIwB,kCAajB,IAAA,IAAAe,EAAAvD,UAAAR,OAAXS,EAAW,IAAAC,MAAAqD,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAXvD,EAAWuD,GAAAxD,UAAAwD,GACb,OAAO/C,EAAAQ,aAAAC,WAAA,EAAA,CAAa1C,KAAK,GAAIA,KAAKoC,MAA3BL,OAAoCN,iCAc9B,IAAA,IAAAwD,EAAAjF,KAAAkF,EAAA1D,UAAAR,OAAXS,EAAW,IAAAC,MAAAwD,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAX1D,EAAW0D,GAAA3D,UAAA2D,GACb,IAAMC,EAAW3D,EAAU4D,MACrBrB,EAAUvC,EAAUgC,IAAI,SAACC,GAAD,OAAc,EAAAzB,EAAA0B,iBAAgBsB,EAAK7C,KAAMsB,KACvE,OAAO1D,KAAKiD,KAAK,SAACT,GAAD,OAAQ,EAAAY,EAAAkC,aAAY9C,EAAIwB,EAASoB,uMC/GnD,SAAqB5C,EAAIf,EAAW2D,GACvC,IAAIG,EAAYC,EAAaC,IAAIjD,QACfkD,IAAdH,IACAA,EAAY,GACZC,EAAaG,IAAInD,EAAI+C,IAEzBA,EAAUrC,KAAK,CAACzB,UAAAA,EAAW2D,SAAAA,yBAYxB,SAA2B5C,EAAIoD,GAClC,IAAML,EAAYC,EAAaC,IAAIjD,GACnC,QAAkBkD,IAAdH,EAAyB,CACzB,IAAMvB,EAAUxB,EAAGsB,UAAUC,MAAM,KACnCwB,EAAUM,QAAQ,SAACC,GACf,IAAMC,EAAoBD,EAASrE,UAC7BuE,EAASD,EAAkBE,MAAM,SAACC,GAAD,OAASlC,EAAQC,SAASiC,KACjE,GAAIF,EAAQ,CACR,IAAMG,EAASJ,EAAkBK,KAAK,SAACF,GAAD,OAASN,EAAa3B,SAASiC,KACjEC,GACAL,EAASV,SAASrE,KAAKyB,EAAIA,QAxC/C,IAAMgD,EAAe,IAAIa,yGCclB,SAAsB7D,EAAIJ,GAAoB,IAAA,IAAAb,EAAAC,UAAAR,OAAXS,EAAW,IAAAC,MAAA,EAAAH,EAAAA,EAAA,EAAA,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAXF,EAAWE,EAAA,GAAAH,UAAAG,GACjD,OAAOF,EAAUwE,MAAM,SAACvC,GACpB,OAAOlB,EAAG0B,UAAUoC,SAAS3C,EAAgBvB,EAAMsB,cAapD,SAAczD,EAAKkB,GAEtB,IADA,IAAMoC,EAAMpC,EAASH,OACZT,EAAI,EAAGA,EAAIgD,EAAKhD,IACrBN,EAAIM,GAAKY,EAASZ,GAEtBN,EAAIe,OAASuC,kBAWV,SAAsBf,GACzB,OAAOA,EAAGsB,UAAUC,MAAM,KAAKa,OAAO,SAACxC,EAAMmE,GACzC,OAAInE,IAGGoE,EAAYC,KAAKF,GAAOA,EAAMnE,IACtC,wBAWA,SAAwBsE,EAAOC,GAClC,OAAOD,EAAQE,EAAmBD,uBA/DtC,IAAMC,EAAmB,KACnBC,EAAoB,KACpBL,EAAc,sCAwEb,SAAS7C,EAAgBgD,EAASjD,GACrC,OAAOiD,EAAUE,EAAoBnD,gBL9EzC","file":"bem.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\r\n * Import dependencies\r\n */\r\nimport BEMBlock from './block';\r\n\r\n/**\r\n * Provide a CSS selector string, DOM\r\n * element, or nodelist/array and get\r\n * a `BEMBlock` instance to traverse and\r\n * manipulate the component\r\n *\r\n * @param {String|Element|ArrayLike} blocks\r\n * @param {...String} modifiers\r\n * @return {BEM}\r\n * @api public\r\n */\r\nexport default function bem(selector, ...modifiers) {\r\n    let elements = selector;\r\n    if (typeof selector === 'string') {\r\n        elements = document.querySelectorAll(selector);\r\n    }\r\n    if (selector.nodeType) {\r\n        elements = [selector];\r\n    }\r\n    return new BEMBlock(elements, ...modifiers);\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport BEMElement from './element';\r\nimport { hasModifiers, getBlockName, getElementName } from './util';\r\n\r\n/**\r\n * BEM block class\r\n *\r\n * @class BEMBlock\r\n * @extends BEMElement\r\n * @api public\r\n */\r\nexport default class BEMBlock extends BEMElement {\r\n\r\n    /**\r\n     * Instantiate the class with a collection\r\n     * of block level elements and optionally\r\n     * one or more modifiers to filter the\r\n     * collection\r\n     *\r\n     * @constructor\r\n     * @param {ArrayLike} elements\r\n     * @param {...String} modifiers\r\n     * @api private\r\n     */\r\n    constructor(elements, ...modifiers) {\r\n        const name = getBlockName(elements[0]);\r\n        if (modifiers.length) {\r\n            elements = Array.from(elements).filter((el) => hasModifiers(el, name, ...modifiers));\r\n        }\r\n        super(elements, name);\r\n    }\r\n\r\n    /**\r\n     * Find BEM block-elements that are decendants\r\n     * of the collection of block elements\r\n     *\r\n     * @param {String} elementName\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    element(elementName, ...modifiers) {\r\n        const name = getElementName(this.name, elementName);\r\n        let elements = [];\r\n        this.each((el) => elements.push.apply(elements, el.getElementsByClassName(name)));\r\n        if (modifiers.length) {\r\n            elements = elements.filter((el) => hasModifiers(el, name, ...modifiers));\r\n        }\r\n        return new BEMElement(elements, name);\r\n    }\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport { addListener, dispatchListeners } from './listener';\r\nimport { push, hasModifiers, getModifierName } from './util';\r\n\r\n/**\r\n * BEM element class\r\n *\r\n * @class BEMElement\r\n * @api public\r\n */\r\nexport default class BEMElement {\r\n\r\n    /**\r\n     * Instantiate the class with a collection\r\n     * of BEM elements and the BEM class name\r\n     *\r\n     * @constructor\r\n     * @param {ArrayLike} elements\r\n     * @param {String} name\r\n     * @api private\r\n     */\r\n    constructor(elements, name) {\r\n        push(this, elements);\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Invoke the passed function for each element\r\n     * in the collection\r\n     *\r\n     * @param {Function} fn\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    each(fn) {\r\n        for (let i = 0, len = this.length; i < len; i++) {\r\n            const el = this[i];\r\n            fn.call(el, el, i, this);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add one or more modifiers to the\r\n     * collection of BEM elements\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    modify(...modifiers) {\r\n        modifiers = modifiers.map((modifier) => getModifierName(this.name, modifier));\r\n        return this.each((el) => {\r\n            const elClasses = el.className.split(' ');\r\n            const classes = modifiers.filter((modifier) => !elClasses.includes(modifier));\r\n            if (classes.length) {\r\n                el.classList.add(...classes);\r\n                dispatchListeners(el, classes);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Remove one or more modifiers from the\r\n     * collection of BEM elements\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    unmodify(...modifiers) {\r\n        modifiers = modifiers.map((modifier) => getModifierName(this.name, modifier));\r\n        return this.each((el) => el.classList.remove(...modifiers));\r\n    }\r\n\r\n    /**\r\n     * Toggle adding/removing one or more modifiers\r\n     * to the collection of BEM elements\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    toggle(...modifiers) {\r\n        modifiers = modifiers.map((modifier) => getModifierName(this.name, modifier));\r\n        return this.each((el) => {\r\n            const classes = modifiers.reduce((acc, modifier) => {\r\n                if (el.classList.toggle(modifier)) {\r\n                    acc.push(modifier);\r\n                }\r\n                return acc;\r\n            }, []);\r\n            if (classes.length) {\r\n                dispatchListeners(el, classes);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if the first BEM element in the\r\n     * collection has one or more modifiers\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {Boolean}\r\n     * @api public\r\n     */\r\n    is(...modifiers) {\r\n        return hasModifiers(this[0], this.name, ...modifiers);\r\n    }\r\n\r\n    /**\r\n     * Add a listener to execute a callback\r\n     * function when one or more of the\r\n     * provided modifiers are added to an\r\n     * element in the collection\r\n     *\r\n     * @param {...String} modifiers\r\n     * @param {Function} callback\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    on(...modifiers) {\r\n        const callback = modifiers.pop();\r\n        const classes = modifiers.map((modifier) => getModifierName(this.name, modifier));\r\n        return this.each((el) => addListener(el, classes, callback));\r\n    }\r\n}\r\n","/**\r\n * Common variables\r\n */\r\nconst listenersMap = new Map();\r\n\r\n/**\r\n * Add a callback function to be invoked\r\n * when the associated modifiers have been\r\n * added to an element\r\n *\r\n * @param {Element} el\r\n * @param {Array} modifiers\r\n * @param {Function} callback\r\n * @api private\r\n */\r\nexport function addListener(el, modifiers, callback) {\r\n    let listeners = listenersMap.get(el);\r\n    if (listeners === undefined) {\r\n        listeners = [];\r\n        listenersMap.set(el, listeners);\r\n    }\r\n    listeners.push({modifiers, callback});\r\n}\r\n\r\n/**\r\n * Invoke the callback function if\r\n * the associated modifiers have just\r\n * been added\r\n *\r\n * @param {Element} el\r\n * @param {Array} newModifiers\r\n * @api private\r\n */\r\nexport function dispatchListeners(el, newModifiers) {\r\n    const listeners = listenersMap.get(el);\r\n    if (listeners !== undefined) {\r\n        const classes = el.className.split(' ');\r\n        listeners.forEach((listener) => {\r\n            const listenerModifiers = listener.modifiers;\r\n            const hasAll = listenerModifiers.every((mod) => classes.includes(mod));\r\n            if (hasAll) {\r\n                const hasAny = listenerModifiers.some((mod) => newModifiers.includes(mod));\r\n                if (hasAny) {\r\n                    listener.callback.call(el, el);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n","/**\r\n * Common variables\r\n */\r\nconst elementSeparator = '__';\r\nconst modifierSeparator = '--';\r\nconst blockNameRe = /^[a-zA-Z0-9]+(?:[-_][a-zA-Z0-9]+)*$/;\r\n\r\n/**\r\n * Check if an element has one or\r\n * more modifiers\r\n *\r\n * @param {Element} el\r\n * @param {String} name\r\n * @param {...String} modifiers\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function hasModifiers(el, name, ...modifiers) {\r\n    return modifiers.every((modifier) => {\r\n        return el.classList.contains(getModifierName(name, modifier));\r\n    });\r\n}\r\n\r\n/**\r\n * Add elements to a `BEMBlock` or\r\n * `BEMElement` isntance as indexed\r\n * properties to emulate an array\r\n *\r\n * @param {BEMBlock|BEMElement} bem\r\n * @param {ArrayLike} elements\r\n * @api private\r\n */\r\nexport function push(bem, elements) {\r\n    const len = elements.length;\r\n    for (let i = 0; i < len; i++) {\r\n        bem[i] = elements[i];\r\n    }\r\n    bem.length = len;\r\n}\r\n\r\n/**\r\n * Get the BEM block name from an\r\n * element\r\n *\r\n * @param {Element} el\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function getBlockName(el) {\r\n    return el.className.split(' ').reduce((name, cls) => {\r\n        if (name) {\r\n            return name;\r\n        }\r\n        return blockNameRe.test(cls) ? cls : name;\r\n    }, null);\r\n}\r\n\r\n/**\r\n * Get the BEM block-element name\r\n *\r\n * @param {String} block\r\n * @param {String} element\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function getElementName(block, element) {\r\n    return block + elementSeparator + element;\r\n}\r\n\r\n/**\r\n * Get the BEM modifier name\r\n *\r\n * @param {String} element\r\n * @param {String} modifier\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function getModifierName(element, modifier) {\r\n    return element + modifierSeparator + modifier;\r\n}\r\n"]}