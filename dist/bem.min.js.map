{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/bem.js","src/block.js","src/element.js","src/util.js"],"names":["f","exports","module","define","amd","window","global","self","this","ryanmorrbem","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","selector","elements","document","querySelectorAll","nodeType","_len","arguments","modifiers","Array","_key","_construct","_block","default","concat","_element","_util","BEMBlock","_classCallCheck","name","getBlockName","toArray","filter","el","hasModifiers","apply","_possibleConstructorReturn","_getPrototypeOf","elementName","_len2","_key2","getElementName","each","push","getElementsByClassName","BEMElement","fn","len","_this","classes","map","modifier","getModifierName","_el$classList","classList","add","_toConsumableArray","_this2","_el$classList2","remove","_this3","_len3","_key3","forEach","toggle","_len4","_key4","obj","from","slice","every","contains","bem","className","split","reduce","cls","blockNameRe","test","block","element","elementSeparator","modifierSeparator"],"mappings":"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","file":"bem.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\r\n * Import dependencies\r\n */\r\nimport BEMBlock from './block';\r\n\r\n/**\r\n * Provide a CSS selector string, DOM\r\n * element, or nodelist/array and get\r\n * a `BEMBlock` instance to traverse and\r\n * manipulate the component\r\n *\r\n * @param {String|Element|ArrayLike} blocks\r\n * @param {...String} modifiers\r\n * @return {BEM}\r\n * @api public\r\n */\r\nexport default function bem(selector, ...modifiers) {\r\n    let elements = selector;\r\n    if (typeof selector === 'string') {\r\n        elements = document.querySelectorAll(selector);\r\n    }\r\n    if (selector.nodeType) {\r\n        elements = [selector];\r\n    }\r\n    return new BEMBlock(elements, ...modifiers);\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport BEMElement from './element';\r\nimport { toArray, hasModifiers, getBlockName, getElementName } from './util';\r\n\r\n/**\r\n * BEM block class\r\n *\r\n * @class BEMBlock\r\n * @extends BEMElement\r\n * @api public\r\n */\r\nexport default class BEMBlock extends BEMElement {\r\n\r\n    /**\r\n     * Instantiate the class with a collection\r\n     * of block level elements and optionally\r\n     * one or more modifiers to filter the\r\n     * collection\r\n     *\r\n     * @constructor\r\n     * @param {ArrayLike} elements\r\n     * @param {...String} modifiers\r\n     * @api private\r\n     */\r\n    constructor(elements, ...modifiers) {\r\n        const name = getBlockName(elements[0]);\r\n        if (modifiers.length) {\r\n            elements = toArray(elements).filter((el) => hasModifiers(el, name, ...modifiers));\r\n        }\r\n        super(elements, name);\r\n    }\r\n\r\n    /**\r\n     * Find BEM block-elements that are decendants\r\n     * of the collection of block elements\r\n     *\r\n     * @param {String} elementName\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    element(elementName, ...modifiers) {\r\n        const name = getElementName(this.name, elementName);\r\n        let elements = [];\r\n        this.each((el) => elements.push.apply(elements, el.getElementsByClassName(name)));\r\n        if (modifiers.length) {\r\n            elements = elements.filter((el) => hasModifiers(el, name, ...modifiers));\r\n        }\r\n        return new BEMElement(elements, name);\r\n    }\r\n}\r\n","/**\r\n * Import dependencies\r\n */\r\nimport { push, hasModifiers, getModifierName } from './util';\r\n\r\n/**\r\n * BEM element class\r\n *\r\n * @class BEMElement\r\n * @api public\r\n */\r\nexport default class BEMElement {\r\n\r\n    /**\r\n     * Instantiate the class with a collection\r\n     * of BEM elements and the BEM class name\r\n     *\r\n     * @constructor\r\n     * @param {ArrayLike} elements\r\n     * @param {String} name\r\n     * @api private\r\n     */\r\n    constructor(elements, name) {\r\n        push(this, elements);\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * Invoke the passed function for each element\r\n     * in the collection\r\n     *\r\n     * @param {Function} fn\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    each(fn) {\r\n        for (let i = 0, len = this.length; i < len; i++) {\r\n            const el = this[i];\r\n            fn.call(el, el, i, this);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add one or more modifiers to the\r\n     * collection of BEM elements\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    modify(...modifiers) {\r\n        const classes = modifiers.map((modifier) => getModifierName(this.name, modifier));\r\n        return this.each((el) => el.classList.add(...classes));\r\n    }\r\n\r\n    /**\r\n     * Remove one or more modifiers from the\r\n     * collection of BEM elements\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    unmodify(...modifiers) {\r\n        const classes = modifiers.map((modifier) => getModifierName(this.name, modifier));\r\n        return this.each((el) => el.classList.remove(...classes));\r\n    }\r\n\r\n    /**\r\n     * Toggle adding/removing one or more modifiers\r\n     * to the collection of BEM elements\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {BEMElement}\r\n     * @api public\r\n     */\r\n    toggle(...modifiers) {\r\n        return this.each((el) => {\r\n            modifiers.forEach((modifier) => {\r\n                el.classList.toggle(getModifierName(this.name, modifier));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check if the first BEM element in the\r\n     * collection has one or more modifiers\r\n     *\r\n     * @param {...String} modifiers\r\n     * @return {Boolean}\r\n     * @api public\r\n     */\r\n    is(...modifiers) {\r\n        return hasModifiers(this[0], this.name, ...modifiers);\r\n    }\r\n}\r\n","/**\r\n * Common variables\r\n */\r\nconst slice = [].slice;\r\nconst elementSeparator = '__';\r\nconst modifierSeparator = '--';\r\nconst blockNameRe = /^[a-zA-Z0-9]+(?:[-_][a-zA-Z0-9]+)*$/;\r\n\r\n/**\r\n * Convert an array-like object to\r\n * an array\r\n *\r\n * @param {ArrayLike} obj\r\n * @return {Array}\r\n * @api private\r\n */\r\nexport function toArray(obj) {\r\n    if (Array.from) {\r\n        return Array.from(obj);\r\n    }\r\n    return slice.call(obj);\r\n}\r\n\r\n/**\r\n * Check if an element has one or\r\n * more modifiers\r\n *\r\n * @param {Element} el\r\n * @param {String} name\r\n * @param {...String} modifiers\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function hasModifiers(el, name, ...modifiers) {\r\n    return modifiers.every((modifier) => {\r\n        return el.classList.contains(getModifierName(name, modifier));\r\n    });\r\n}\r\n\r\n/**\r\n * Add elements to a `BEMBlock` or\r\n * `BEMElement` isntance as indexed\r\n * properties to emulate an array\r\n *\r\n * @param {BEMBlock|BEMElement} bem\r\n * @param {ArrayLike} elements\r\n * @api private\r\n */\r\nexport function push(bem, elements) {\r\n    const len = elements.length;\r\n    for (let i = 0; i < len; i++) {\r\n        bem[i] = elements[i];\r\n    }\r\n    bem.length = len;\r\n}\r\n\r\n/**\r\n * Get the BEM block name from an\r\n * element\r\n *\r\n * @param {Element} el\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function getBlockName(el) {\r\n    return el.className.split(' ').reduce((name, cls) => {\r\n        if (name) {\r\n            return name;\r\n        }\r\n        return blockNameRe.test(cls) ? cls : name;\r\n    }, null);\r\n}\r\n\r\n/**\r\n * Get the BEM block-element name\r\n *\r\n * @param {String} block\r\n * @param {String} element\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function getElementName(block, element) {\r\n    return block + elementSeparator + element;\r\n}\r\n\r\n/**\r\n * Get the BEM modifier name\r\n *\r\n * @param {String} element\r\n * @param {String} modifier\r\n * @return {String}\r\n * @api private\r\n */\r\nexport function getModifierName(element, modifier) {\r\n    return element + modifierSeparator + modifier;\r\n}\r\n"]}